// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  // url      = "file:./dev.db"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bagIngredients BagIngredient[]
  recipeIngredientState RecipeIngredientState[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id String @id @default(cuid())
  slug String @unique
  title String
  serves Int
  thumbnail String?
  instructions String
  video String?
  link String?
  gallery Image[]
  tags Tag[]
  ingredients RecipeIngredient[]
  recipeIngredientStates RecipeIngredientState[]
}

model Ingredient {
  id String @id @default(cuid())
  name String
  image String
  recipeIngredients RecipeIngredient[]
  bagIngredients BagIngredient[]
}

model RecipeIngredient {
  id String @id @default(cuid())
  recipeId String
  ingredientId String
  unitId String
  amount Float?
  instruction String?
  recipe Recipe @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  unit MeasurementUnit @relation(fields: [unitId], references: [id])
}

model MeasurementUnit {
  id String @id @default(cuid())
  name String
  plural String
  recipeIngredients RecipeIngredient[]
  bagIngredients BagIngredient[]
}

model Tag {
  id String @id @default(cuid())
  name String
  recipes Recipe[]
}

model Image {
  id String @id @default(cuid())
  name String
  url String
  recipes Recipe[]
}

model RecipeIngredientState {
  recipeId String
  userId String
  user User @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
  serves Int?
  state String?

  @@unique(fields: [recipeId, userId], name: "id")
}

model BagIngredient {
  userId String
  ingredientId String
  unitId String
  amount Float?
  note String?
  user User @relation(fields: [userId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  unit MeasurementUnit @relation(fields: [unitId], references: [id])

  @@unique(fields: [userId, ingredientId, unitId], name: "bagIngredientId")
}